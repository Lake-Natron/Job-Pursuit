generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seeker {
  id              Int               @id @default(autoincrement())
  first_name      String?           @db.VarChar(255)
  last_name       String?           @db.VarChar(255)
  session_id      String?           @db.VarChar(255)
  email           String            @unique @db.VarChar(255)
  password        String            @unique @db.VarChar(255)
  Application     Application[]
  Education       Education[]
  Meeting         Meeting[]
  Skill           Skill[]
  Work_Experience Work_Experience[]
}

model Work_Experience {
  id           Int       @id @default(autoincrement())
  seeker_id    Int?
  job_details  String?
  company_name String?   @db.VarChar(255)
  location     String?   @db.VarChar(255)
  start_date   DateTime? @db.Date
  end_date     DateTime? @db.Date
  pdf          String?   @db.VarChar(255)
  Seeker       Seeker?   @relation(fields: [seeker_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Education {
  id              Int       @id @default(autoincrement())
  seeker_id       Int?
  school          String?   @db.VarChar(255)
  location        String?   @db.VarChar(255)
  degree          String?   @db.VarChar(255)
  major           String?   @db.VarChar(255)
  graduated       Boolean?
  graduation_date DateTime? @db.Date
  Seeker          Seeker?   @relation(fields: [seeker_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Company {
  id         Int       @id @default(autoincrement())
  name       String?   @db.VarChar(255)
  session_id String?   @db.VarChar(255)
  email      String    @unique @db.VarChar(255)
  password   String    @unique @db.VarChar(255)
  Job        Job[]
  Meeting    Meeting[]
}

model Job {
  id              Int           @id @default(autoincrement())
  name            String?       @db.VarChar(255)
  company_id      Int?
  description     String?
  salary          Int?
  location        String?       @db.VarChar(255)
  close_date      DateTime?     @db.Date
  experience_type String?       @db.VarChar(255)
  employment_type String?       @db.VarChar(255)
  jobsite         String?       @db.VarChar(255)
  Application     Application[]
  Company         Company?      @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Skill           Skill[]
}

model Skill {
  id        Int     @id @default(autoincrement())
  job_id    Int?
  seeker_id Int?
  skill     String? @db.VarChar(255)
  Job       Job?    @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Seeker    Seeker? @relation(fields: [seeker_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Application {
  id            Int       @id @default(autoincrement())
  job_id        Int?
  seeker_id     Int?
  seeker_notes  String?   @db.VarChar(255)
  company_notes String?   @db.VarChar(255)
  Job           Job?      @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Seeker        Seeker?   @relation(fields: [seeker_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Meeting       Meeting[]
}

model Meeting {
  id               Int          @id @default(autoincrement())
  seeker_id        Int?
  company_id       Int?
  application_id   Int?
  date             DateTime?    @db.Date
  start_time       DateTime?    @db.Time(6)
  end_time         DateTime?    @db.Time(6)
  description      String?
  change_requested Boolean?
  canceled         Boolean?
  seeker_accepted  Boolean?
  change_notes     String?      @db.VarChar(255)
  Application      Application? @relation(fields: [application_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Company          Company?     @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Seeker           Seeker?      @relation(fields: [seeker_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
